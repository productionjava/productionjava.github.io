{"version":3,"sources":["img/book.png","reducers/RootReducer.js","reducers/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","__webpack_require__","p","RootReducer","state","arguments","length","undefined","config","email","token","action","type","payload","combineReducers","root","store","createStore","App","localStorage","getItem","mail","this","props","changeConfig","Object","objectSpread","classes","console","log","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Grid_default","container","spacing","item","xs","style","height","alignItems","alignContent","justify","sm","src","require","component","gutterBottom","Button_default","button","Paper_default","paper","Component","WrappedApp","connect","dispatch","withStyles","theme","flexGrow","grow","menuButton","marginLeft","marginRight","padding","unit","textAlign","palette","text","secondary","AppWrapper","es","Boolean","window","location","hostname","match","ReactDOM","render","App_AppWrapper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cc42df0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book.7fd3346b.png\";","export default function (state = {\n  config: {\n    email: null,\n    token: null\n  },\n}, action) {\n  switch (action.type) {\n    case 'CONFIG_CHANGED':\n      return {config: action.payload}\n  }\n  // i dont care about the action because it is not inside my\n  // list of actions I am interested int (case statements inside the switch)\n  return state\n}\n","import { combineReducers } from 'redux';\nimport RootReducer from './RootReducer'\nconst rootReducer = combineReducers({\n  root: RootReducer\n});\nexport default rootReducer;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport logo from './logo.svg';\nimport './App.css';\nimport {withStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {Provider} from 'react-redux'\nimport rootReducer from './reducers'\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux'\nimport RootReducer from \"./reducers/RootReducer\";\nimport { createStore } from 'redux'\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\n\nconst store = createStore(RootReducer);\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n});\n\nclass App extends Component {\n\n    componentDidMount() {\n        const token = localStorage.getItem('token')\n        const mail = localStorage.getItem('email')\n        if(token != null) {\n            this.props.changeConfig({...this.props.config, token: token, email: mail});\n        }\n    }\n    render() {\n        const {classes} = this.props;\n        console.log(this.props);\n        return (\n            <div className=\"App\">\n                <AppBar position=\"sticky\" color=\"default\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Production Javaâ„¢\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Grid container spacing={24}>\n                    <Grid item xs={12} >\n                        <Grid container style={{height:'80vh'}} >\n                            <Grid container spacing={24} alignItems={\"center\"} alignContent={\"center\"} justify={\"center\"} >\n                                <Grid item xs={12} sm={6}>\n                                    <img src={require(\"./img/book.png\")}/>\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <Typography component=\"h3\" variant=\"h2\" gutterBottom>\n                                        Production Java\n                                    </Typography>\n                                    <Typography component=\"content\" variant=\"content\" gutterBottom>\n                                        This book will cure any desease, bootstrap self-driving cars and save your cat from fire. Although I wish that it'll be true, but it's just placeholder text :C\n                                    </Typography>\n                                    <Typography component=\"content\" variant=\"content\" gutterBottom>\n                                        If you look closely, you'll see that on the left hand there needs to be some picture\n                                    </Typography>\n                                    <Button variant=\"contained\" color=\"secondary\" className={classes.button}>\n                                        Pre-order\n                                    </Button>\n                                    <Typography component=\"caption\" variant=\"caption\">\n                                        You won't be charged without your agreement\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Paper className={classes.paper}>xs=12 sm=6</Paper>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Paper className={classes.paper}>xs=12 sm=6</Paper>\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <Paper className={classes.paper}>xs=6 sm=3</Paper>\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <Paper className={classes.paper}>xs=6 sm=3</Paper>\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <Paper className={classes.paper}>xs=6 sm=3</Paper>\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <Paper className={classes.paper}>xs=6 sm=3</Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n// Action\nconst increaseAction = { type: 'CONFIG_CHANGED' };\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps(state) {\n    return {\n        config: state.config,\n    };\n}\n// Map Redux actions to component props\nfunction mapDispatchToProps(dispatch) {\n    return {\n        changeConfig: (config) => dispatch({type:\"CONFIG_CHANGED\", payload: config})\n    }\n}\n\nconst WrappedApp = connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(App));\n\nexport default class AppWrapper extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <WrappedApp/>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}